import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from rutube import Rutube

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–æ–∫
user_links = {}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Telegram (–≤ –±–∞–π—Ç–∞—Ö)
MAX_TELEGRAM_FILE_SIZE = 50 * 1024 * 1024  # 50 MB


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Shorts \n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É Shorts –Ω–∞ Rutube-–≤–∏–¥–µ–æ.")


async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    try:
        ru = Rutube(url)
        user_links[update.effective_user.id] = ru

        resolutions = ru.available_resolutions
        keyboard = [
            [InlineKeyboardButton(text=res, callback_data=res)] for res in resolutions
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def handle_resolution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    res = query.data
    user_id = query.from_user.id
    ru = user_links.get(user_id)

    if not ru:
        await query.edit_message_text("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_message = await query.edit_message_text(f"üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ {res}...")
    
    video_path = None
    try:
        video = ru.get_by_resolution(int(res.split("x")[-1]))
        video_path = f"{video.title}.mp4"
        full_path = os.path.join("downloads", video_path)
        
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_queue = asyncio.Queue()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task = asyncio.create_task(
            update_progress_worker(progress_message, res, progress_queue)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
        download_task = asyncio.create_task(
            run_download(
                video=video,
                path=full_path,
                progress_queue=progress_queue
            )
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await download_task
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await progress_queue.put((None, None))
        await progress_task

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        if not os.path.exists(full_path):
            await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")
            return
            
        file_size = os.path.getsize(full_path)
        if file_size > MAX_TELEGRAM_FILE_SIZE:
            await progress_message.edit_text(
                f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size//(1024*1024)}MB > {MAX_TELEGRAM_FILE_SIZE//(1024*1024)}MB)"
            )
            return
            
        await progress_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        with open(full_path, "rb") as video_file:
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=video_file,
                caption=video.title,
                read_timeout=60,
                write_timeout=60,
                connect_timeout=60
            )
        await progress_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if video_path and os.path.exists(full_path):
            try:
                os.remove(full_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


async def update_progress_worker(message, resolution, queue):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
    last_percent = 0
    while True:
        current, total = await queue.get()
        if current is None:  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            break
            
        percent = int((current / total) * 100)
        if percent != last_percent:
            last_percent = percent
            stages = {
                0: "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...",
                30: "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...",
                70: "üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...",
                100: "‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!"
            }
            stage = next((v for k, v in stages.items() if percent >= k), stages[100])
            await message.edit_text(
                f"{stage}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%"
            )


async def run_download(video, path, progress_queue):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    def progress_callback(current, total):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        asyncio.run_coroutine_threadsafe(
            progress_queue.put((current, total)),
            asyncio.get_event_loop()
        ).result()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs(os.path.dirname(path), exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    await asyncio.to_thread(
        video.download,
        path=os.path.dirname(path),
        workers=8,
        progress_callback=progress_callback
    )


def main():
    if not os.path.exists("downloads"):
        os.makedirs("downloads")

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    app.add_handler(CallbackQueryHandler(handle_resolution))

    app.run_polling()


if __name__ == "__main__":
    main()